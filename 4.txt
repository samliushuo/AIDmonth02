前情回顾

1. 文件

   分类 ： 文本   二进制

   字节串 ： 一段数据的二进制内容
           encode()    字符串 --》 字节串
           decode()    字节串 --》 字符串

2. 文件读写操作
   open()  --> read()/write() --> close()

   r   w   a   +   b

3. 细节原理

    * 缓冲区  --》 减少和硬盘交互次数，提高读写效率
                 系统定义    行缓冲    指定缓冲区大小
                 flush()

    * 文件偏移量 --》 tell()   seek()

练习 ： 编写一个程序，列出指定目录（input输入）下所有大小超过 1024字节的普通文件文件名

练习 ：
1. 在一个字符串文本中匹配出所有整数
   In [35]: re.findall('[0-9]+',"小张:183,体重78kg")
   out[35]: [ '183', '78']

2. 在一段文字中匹配出大写字母开头的单词
  In [44]: re.findall('[A-Z][a-zA-Z]*',"Hi,Jame How are you,I am fine
    ...:  NBA")
Out[44]: ['Hi', 'Jame', 'How', 'I', 'NBA']

3. 在一个字符串文本中匹配出所有整数 但是整数包含正整数和负数
In [47]: re.findall('-?[0-9]+',"小张:183,体重78kg,潜水:-50m")
Out[47]: ['183', '78', '-50']

4. 电话号码 （中国手机号）
In [50]: re.findall('1[0-9]{10}',"貂蝉:13845464748")
Out[50]: ['13845464748']

5. 匹配一下qq号码
In [56]: re.findall('[1-9][0-9]{4,11}',"552456385")
Out[56]: ['552456385']

6. 匹配大写字母开头的单词  （Hello  I   kitty  NBA  iPython）
In [15]: re.findall(r"\b[A-Z][a-zA-Z]*","Hello  I   kitty  NBA  iPy
    ...: thon")
Out[15]: ['Hello', 'I', 'NBA']

7. 匹配数字  18  -99  1.23  -55.4

8. 有若干本数 《爱你不是两三天》 《别在走--2008》 《家书，今天你好吗？》
In [52]: re.findall(r"《.+?》","1.《爱你不是两三天》 2.《别在走--20
    ...: 08》3. 《家书，今天你好吗？》")
Out[52]: ['《爱你不是两三天》', '《别在走--2008》', '《家书，今天你好吗？》']

9. 匹配一下最新的身份证号码
In [19]: re.search(r"\d{17}(\d|x)","11008119990305105x").group()
Out[19]: '11008119990305105x'

作业 ： 1. 正则表达式元字符再熟悉一遍
       2. 在log.txt文件上完成，写一个程序
          input输入一个接口名称
          得到该接口描述中的 address is 的地址值

          提示 ： 每段之间一定有空行
                 每段的首单词就是接口名称 
                 地址 三组每组4个16进制数




